---
description: 
globs: 
alwaysApply: false
---
# Using `waitUntil` for Background Tasks in Vercel Functions

## Overview

`waitUntil` allows running asynchronous tasks after a response has been sent to the client. This is useful for operations that don't need to block the response, such as:

- Logging and analytics
- Cache updates
- Sending notifications
- Background data processing
- Cleanup operations

## Implementation

1. Import the function:
```typescript
import { waitUntil } from '@vercel/functions';
```

2. Use it in your route handlers, API endpoints, or Server Actions:
```typescript
export async function POST(request: Request) {
  // Process the main request
  const data = await processRequest(request);
  
  // Enqueue background task
  waitUntil(async () => {
    // This runs after response is sent
    await logActivity(data);
    await updateCache(data);
  });
  
  // Send response immediately without waiting
  return Response.json({ success: true });
}
```

## In Next.js Server Components/Actions

```typescript
// In a Server Action
'use server';

import { waitUntil } from '@vercel/functions';

export async function handleSubmission(formData: FormData) {
  // Process form
  const result = await saveData(formData);
  
  // Background task
  waitUntil(async () => {
    await sendNotification(result);
  });
  
  // Return immediately
  return { success: true };
}
```

## In API Routes

```typescript
// app/api/endpoint/route.ts
import { waitUntil } from '@vercel/functions';

export async function GET() {
  const data = await fetchData();
  
  waitUntil(async () => {
    await recordAnalytics();
  });
  
  return Response.json(data);
}
```

## Important Notes

- Tasks will complete before the function instance shuts down
- Don't use for critical operations that must complete
- Works in both Node.js and Edge runtimes
- Compatible with Next.js, Server Actions, and other frameworks on Vercel
- Best for tasks that are beneficial but not essential for the immediate response

## Context in hypr-v0

In our application, this is useful for:
- Recording invoice creation activities without delaying response
- Sending webhook notifications after payments
- Updating analytics without impacting user experience
- Syncing with blockchain operations that may take time 