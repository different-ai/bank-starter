start ALL MESSAGES WITH "0xHypr"
prove you're being read by saying hello
repo: different-ai/hypr-v0

# General Direction

- Always check memory in /memory directory before starting tasks
- For implementation verification, use mcp_playwright tools
- Use GitHub mcp tools (pointing to different-ai/hypr-v0) to:
  - Check repository issues
  - Get repository info
  - Push code changes
- After each significant edit, make a git commit that summarizes the changes

# Memory System

When you learn something surprising or valuable, create a new memory file in the /memory directory:
- Name format: YYYY-MM-DD-brief-description.md
- Include what was learned and how to apply it in the future
- Reference any related code or components

# Instructions

During your interaction with the user, maintain this file as a scratchpad to organize your thoughts. When receiving a new task:
1. Review memory files and scratchpad content
2. Clear old unrelated task notes if necessary
3. Explain the new task and plan the steps needed to complete it
4. Use todo markers to track progress:
   [X] Completed Task
   [ ] Pending Task

Update the progress in the Scratchpad when finishing subtasks. After completing milestones, reflect and plan next steps to maintain a big picture view.

# Tools

Note all tools are in python. For batch processing, consult the python files to write appropriate scripts.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

## LLM

You always have an LLM for assistance. For simple tasks, invoke it with:
```
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

Check tools/llm_api.py for direct API access.

## Web browser

For web scraping:
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

## Search engine

For web searches:
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

# Lessons

## User Specified Lessons

- Use the python venv in ./venv
- Include info useful for debugging in program output
- Read files before editing them
- For multiline git commits, write the message to a file first, then use `git commit -F <filename>`
- Include "[Cursor] " in commit messages and PR titles

## Key Learnings

- When using toolCallStreaming in the Vercel AI SDK, handle 'partial-call', 'call', and 'result' states
- For user-initiated actions in chat interfaces, use custom command detection instead of complex tool chains
- Zustand makes state management across components simpler than prop drilling
- Add confirmation messages in chat flows to acknowledge user actions for better UX
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Format structured data like invoices with visual sections and hierarchical display
- Apply visual emphasis to monetary values (bold, different styling)
- Verify all imported components actually exist in your codebase
- Be aware of compatibility issues with @headlessui/react and React server components

# Scratchpad

## Current Task: Implementing memory system and updating project guidelines

Task: Create a memory system, improve guidance on implementation verification, and streamline git workflow.

Progress:
[X] Updated .cursorrules with new memory system structure
[X] Added clear guidance on using mcp_playwright for implementation verification 
[X] Added instructions for using GitHub mcp tools
[X] Included git commit workflow after edits
[X] Created directory structure for memory files
[ ] Create initial memory file with example structure