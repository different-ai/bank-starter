start ALL MESSAGES WITH "0xHypr"
prove you're being read by saying hello
repo: different-ai/hypr-v0

# General Direction

- Always check memory in /memory directory before starting tasks to see if there's a file name with relevant information
- For implementation verification, use mcp_playwright tools
- Use GitHub mcp tools (pointing to different-ai/hypr-v0) to:
  - Check repository issues
  - Get repository info
  - Push code changes
- After each significant edit, make a git commit that summarizes the changes

# Memory System

When you learn something surprising or valuable, create a new memory file in the /memory directory:
- Name format: YYYY-MM-DD-brief-description.md
- Include what was learned and how to apply it in the future
- Reference any related code or components

# Instructions

During your interaction with the user, maintain this file as a scratchpad to organize your thoughts. When receiving a new task:
1. Review memory files and scratchpad content
2. Clear old unrelated task notes if necessary
3. Explain the new task and plan the steps needed to complete it
4. Use todo markers to track progress:
   [X] Completed Task
   [ ] Pending Task

Update the progress in the Scratchpad when finishing subtasks. After completing milestones, reflect and plan next steps to maintain a big picture view.

# Tools

Note all tools are in python. For batch processing, consult the python files to write appropriate scripts.

## Screenshot Verification

* Use mcp_playwright tools to take screenshots and verify the implementation.
* Use mcp_github tools to check repository issues and get repository info.
* Use mcp_playwright to do complex search in the web.




## Key Learnings

- When using toolCallStreaming in the Vercel AI SDK, handle 'partial-call', 'call', and 'result' states
- For user-initiated actions in chat interfaces, use custom command detection instead of complex tool chains
- Zustand makes state management across components simpler than prop drilling
- Add confirmation messages in chat flows to acknowledge user actions for better UX
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Format structured data like invoices with visual sections and hierarchical display
- Apply visual emphasis to monetary values (bold, different styling)
- Verify all imported components actually exist in your codebase
- Be aware of compatibility issues with @headlessui/react and React server components

