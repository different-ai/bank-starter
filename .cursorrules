start ALL MESSAGES WITH "Yes, sir."
repo: different-ai/hypr-v0





- always use pnpm
- always use playwright to verify the implementation by navigating and taking screenshots
# General Direction
- always use kebab case for file names
- use viem when possible instead of ethers
- neon project is called hypr-bank
- if you mock data always create a new file in memory/mock-data-<name>.md to remember that we need to do get rid of it


- Always check memory in /memory directory before starting tasks to see if there's a file name with relevant information
- After each significant edit, make a git commit that summarizes the changes
- Always use the mcp playwright tools to verify the implementation by navigating and taking screenshots

# Monorepo Structure (PNPM Workspace + Turbo)

This is a PNPM monorepo managed with Turborepo.
Key directories containing applications/packages:
- `packages/`: Contains the main applications and shared libraries.
- `pipes/`: Contains potentially auxiliary or specialized applications.

## Packages:

- **`packages/bank` (`@hypr/bank`)**: 
  - Purpose: Seems to be the main banking/allocation application.
  - Type: Next.js App
  - Runs on Port: **3013** (`pnpm --filter bank dev`)
- **`packages/expo` (`@hypr/expo`)**:
  - Purpose: Mobile application (React Native/Expo - Placeholder)
  - Type: Expo App (Placeholder)
  - Runs on Port: **Unknown** (`pnpm --filter expo start` - Placeholder)
- **`packages/deep-yield` (`@hyprsqrl/deep-yield`)**:
  - Purpose: Likely related to yield strategies or AI analysis.
  - Type: Next.js App
  - Runs on Port: **3060** (`pnpm --filter deep-yield dev`)
- **`packages/web` (`@hyprsqrl/web`)**:
  - Purpose: Another web interface, potentially user-facing.
  - Type: Next.js App
  - Runs on Port: **3050** (`pnpm --filter web dev`)
- **`packages/landing-v0` (`@hyprsqrl/landing`)**:
  - Purpose: Landing page application.
  - Type: Next.js App
  - Runs on Port: **3012** (`pnpm --filter landing dev`)
- **`packages/shared` (`@hypr/shared`)**:
  - Purpose: Shared utilities, types, or components used by other packages.
  - Type: Library (Does not run on a port)

## Pipes:

- **`pipes/auto-pay` (`auto-pay`)**:
  - Purpose: Likely handles automated payments or related workflows.
  - Type: Next.js App
  - Runs on Port: **3000** (Default - `pnpm --filter auto-pay dev`)

# Memory System

When you learn something surprising or valuable, create a new memory file in the /memory directory:
- Name format: YYYY-MM-DD-brief-description.md
- Include what was learned and how to apply it in the future
- Reference any related code or components

# Instructions

During your interaction with the user, maintain this file as a scratchpad to organize your thoughts. When receiving a new task:
1. Review memory files and scratchpad content
2. Clear old unrelated task notes if necessary
3. Explain the new task and plan the steps needed to complete it
4. Use todo markers to track progress:
   [X] Completed Task
   [ ] Pending Task

Update the progress in the Scratchpad when finishing subtasks. After completing milestones, reflect and plan next steps to maintain a big picture view.

# Tools

## Playwright

* Use playwright tools to take screenshots and verify the implementation. (e.g. browser_navigate, browser_snapshot, browser_press_key, browser_take_screenshot, browser_type, etc)
* Use playwright to do complex search in the web. 

## Github

* Use github tools to check repository issues and get repository info.
